//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using static c_project.SignUp;
using static c_project.DashBoard;
namespace c_project.database
{
    using System;
    using System.Collections.Generic;
    using System.Data.SqlClient;
    using System.Linq;
    using System.Windows.Forms;

    public partial class task
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public task()
        {
            this.bridge_task_userdata = new HashSet<bridge_task_userdata>();
        }
    
        public int t_id { get; set; }
        public int p_id { get; set; }
        public string t_name { get; set; }
        public string content { get; set; }
        public Nullable<System.DateTime> date_time_created { get; set; }
        public Nullable<System.DateTime> date_time_finish { get; set; }
        public Nullable<int> t_status { get; set; }
        public Nullable<bool> t_done { get; set; }
        public string t_img { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<bridge_task_userdata> bridge_task_userdata { get; set; }
        public virtual project project { get; set; }


        public void updateTask(task currentTask)
        {
            //string connectionString = @"Data Source=DESKTOP-MN38AK4;Initial Catalog=ctrltask;Integrated Security=True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False";
            Data db = new Data();
            var t = db.task.Where(i => currentTask.t_id == i.t_id).FirstOrDefault();
            try
            {
                using (SqlConnection connection = new SqlConnection(db.connectionString))
                {
                    connection.Open();

                    string updateQuery = "UPDATE task SET ";

                    if (!string.IsNullOrEmpty(currentTask.t_name) && currentTask.t_name != t.t_name)
                    {
                        updateQuery += "t_name = @t_name, ";
                    }

                    if (!string.IsNullOrEmpty(currentTask.content))
                    {
                        updateQuery += "content = @content, ";
                    }

                    if (currentTask.date_time_finish != null && currentTask.date_time_finish != t.date_time_finish)
                    {
                        updateQuery += "date_time_finish = @date_time_finish, ";
                    }

                    if (currentTask.t_status != t.t_status)
                    {
                        updateQuery += "t_status = @t_status, ";
                    }

                    updateQuery = updateQuery.TrimEnd(' ', ',');

                    updateQuery += " WHERE t_id = @t_id";

                    using (SqlCommand command = new SqlCommand(updateQuery, connection))
                    {
                        if (!string.IsNullOrEmpty(currentTask.t_name))
                        {
                            command.Parameters.AddWithValue("@t_name", currentTask.t_name);
                        }

                        if (!string.IsNullOrEmpty(currentTask.content))
                        {
                            command.Parameters.AddWithValue("@content", currentTask.content);
                        }

                        if (currentTask.date_time_finish != null && currentTask.date_time_finish != t.date_time_finish)
                        {
                            command.Parameters.AddWithValue("@date_time_finish", currentTask.date_time_finish);
                        }

                        if (currentTask.t_status != t.t_status)
                        {
                            command.Parameters.AddWithValue("@t_status", currentTask.t_status);
                        }

                        command.Parameters.AddWithValue("@t_id", currentTask.t_id);

                        int rowsAffected = command.ExecuteNonQuery();

                        if (rowsAffected > 0)
                        {
                            MessageBox.Show("Task updated successfully.");
                        }
                        else
                        {
                            MessageBox.Show("No rows updated. Check your primary key value or data unchanged.");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("An error occurred: " + ex.Message);
            }
        }

        public void addTask(task t, string[] Collaborators)
        {
            Data db = new Data();
            project p = new project();
            userdata u = new userdata();
            db.task.Add(t);
            db.SaveChanges();
            p = db.project.Where(a => a.p_id == t.p_id).FirstOrDefault();
            p.number_of_tasks += 1;
            db.SaveChanges();
            bridge_task_userdata br = new bridge_task_userdata();
            br.u_id = currentUser.u_id;
            br.t_id = t.t_id;
            db.bridge_task_userdata.Add(br);
            db.SaveChanges();
            foreach (string email in Collaborators)
            {
                u = db.userdata.Where(a => a.u_email == email).FirstOrDefault();
                if (u != null)
                {
                    bridge_task_userdata br2 = new bridge_task_userdata();
                    br2.u_id = u.u_id;
                    br2.t_id = t.t_id;
                    db.bridge_task_userdata.Add(br2);
                    db.SaveChanges();
                }

            }
            MessageBox.Show("the task is added");
        }
        public task searchForTask(string name, int id)
        {
            Data db = new Data();
            var Tasks = db.task.Where(a => a.t_name == name && a.p_id == id).FirstOrDefault();
            if (Tasks != null && Tasks.t_name == name && Tasks.p_id == id)
            {
                return Tasks;
            }
            else
            {
                return null;
            }
        }
        public void deleteTask(string taskName, int p_id)
        {
            Data db = new Data();
            task t = new task();
            project p = new project();
            t = db.task.Where(a => a.p_id == p_id && a.t_name == taskName).FirstOrDefault();
            p = db.project.Where(a => a.p_id == t.p_id).FirstOrDefault();
            var bridgeTasks = db.bridge_task_userdata.Where(a => a.t_id == t.t_id).ToList();
            foreach (bridge_task_userdata b in bridgeTasks)
            {
                db.bridge_task_userdata.Remove(b);
                db.SaveChanges();
            }
            p.number_of_tasks -= 1;
            totalTasks -= 1;
            if (t.t_done == true)
                doneTasksForToday -= 1;
            db.SaveChanges();
            db.task.Remove(t);
            db.SaveChanges();
        }

        public task searchTask(task taskName)
        {
            Data db = new Data();
            var tasks = db.task.Where(a => a.p_id == taskName.p_id && a.t_name == taskName.t_name).FirstOrDefault();
            if (tasks != null && tasks.t_name == taskName.t_name && tasks.p_id == taskName.p_id)
            {
                return tasks;
            }
            return null;
        }
        public int notification(DateTime startTime, DateTime endTime)
        {

            TimeSpan tmElapsed = endTime - startTime;
            return tmElapsed.Days;

        }

    }
}
