//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using static c_project.SignUp;
namespace c_project.database
{
    using System;
    using System.Collections.Generic;
    using System.Data.SqlClient;
    using System.Linq;
    using System.Windows.Forms;

    public partial class project
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public project()
        {
            this.task = new HashSet<task>();
        }
    
        public int p_id { get; set; }
        public int u_id { get; set; }
        public string p_name { get; set; }
        public Nullable<int> number_of_tasks { get; set; }
    
        public virtual userdata userdata { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<task> task { get; set; }


        public void updateProject(project currentProject)
        {
            //string connectionString = @"Data Source=DESKTOP-MN38AK4;Initial Catalog=ctrltask;Integrated Security=True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False";
            Data db = new Data();

            var pp = db.project.Where(a => a.p_id == currentProject.p_id).FirstOrDefault();
            var ppp = db.project.Where(a => a.p_name == currentProject.p_name).FirstOrDefault();

            if (ppp != null)
            {
                MessageBox.Show("the name is already exit");
                return;
            }
            if (currentProject.p_id != 0)
            {
                try
                {
                    using (SqlConnection connection = new SqlConnection(db.connectionString))
                    {
                        connection.Open();

                        string updateQuery = "UPDATE project SET ";
                        if (!String.IsNullOrEmpty(currentProject.p_name))
                        {
                            if (currentProject.p_name == pp.p_name)
                            {
                                //MessageBox.Show("this is the last name");
                            }
                            else
                            {
                                updateQuery += "p_name = @p_name, ";
                            }
                        }


                        updateQuery = updateQuery.Replace(',', ' ');


                        updateQuery += " WHERE p_id = @p_id";
                        MessageBox.Show(currentProject.p_id.ToString());
                        MessageBox.Show(updateQuery);
                        using (SqlCommand command = new SqlCommand(updateQuery, connection))
                        {
                            if (!string.IsNullOrEmpty(currentProject.p_name))
                            {
                                //MessageBox.Show("updatename");
                                command.Parameters.AddWithValue("@p_name", currentProject.p_name);
                            }


                            command.Parameters.AddWithValue("@p_id", currentProject.p_id);
                            int rowsAffected = command.ExecuteNonQuery();
                            //MessageBox.Show("hello");
                            MessageBox.Show(rowsAffected.ToString());

                            if (rowsAffected > 0)
                            {
                                //MessageBox.Show("done");
                                // MessageBox("done");
                                Console.WriteLine("User data updated successfully.");
                            }
                            else
                            {
                                //MessageBox.Show("notdone");
                                Console.WriteLine("User not found. No data updated.");
                            }
                        }


                    }

                }
                catch (Exception ex)
                {
                    Console.WriteLine("An error occurred: " + ex.Message);
                }
            }
        }

        public project searchProject(string projectName, int id)
        {
            Data db = new Data();
            var projects = db.project.Where(a => a.p_name == projectName && a.u_id == id).FirstOrDefault();
            if (projects != null && projects.p_name == projectName && projects.u_id == id)
            {
                return projects;
            }
            return null;
        }


        public void deleteProject(string projectName, int u_id)
        {
            Data db = new Data();
            task t = new task();
            project p = new project();
            currentProject = currentProject.searchProject(projectName, u_id);
            if (currentProject != null)
            {
                var tasks = db.task.Where(a => a.p_id == currentProject.p_id).ToArray();
                if (tasks.Length > 0)
                {
                    foreach (var i in tasks)
                    {
                        i.deleteTask(i.t_name, currentProject.p_id);
                    }
                }
                else
                {
                    MessageBox.Show("the project is empty");
                }
                //currentProject.number_of_tasks = -1;
                //db.SaveChanges();

            }

        }

        public void addProject(project p)
        {
            Data db = new Data();
            db.project.Add(p);
            db.SaveChanges();


            //var userProjects = db.projects.Where(proj => proj.userdatas.Any(user => user.u_id == Current_user.u_id)).ToList();
            //foreach (var project in userProjects)
            //{
            //    MessageBox.Show(project.p_name);
            //}

            //var projects = db.projects.ToList();
            //foreach (var project in projects)
            //{
            //    MessageBox.Show(project.p_id.ToString());
            //    var user = project.userdatas.ToList();
            //    foreach (var u in user)
            //        MessageBox.Show(u.u_id.ToString());
            //}

            //MessageBox.Show(Current_user.u_name);
            //MessageBox.Show(Current_user.u_email);
            //MessageBox.Show(Current_user.u_password);

        }



    }
}
