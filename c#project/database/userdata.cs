//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Text.RegularExpressions;
using System.Linq;

namespace c_project.database
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Data.Entity;
    using System.Data.SqlClient;
    using System.Net.Mail;
    using System.Windows.Forms;

    public partial class userdata
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public userdata()
        {
            this.bridge_task_userdata = new HashSet<bridge_task_userdata>();
            this.project = new HashSet<project>();
        }
    
        public int u_id { get; set; }
        public string u_name { get; set; }
        public string u_email { get; set; }
        [MaxLength(256)]
        public string u_password { get; set; }
        public string img { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<bridge_task_userdata> bridge_task_userdata { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<project> project { get; set; }


        public void validname(string name, ref bool isvalidn)
        {
            //isvalid = false;
            String regex = @"^[a-z' 'A-Z]+$";
            Regex rgex = new Regex(regex);
            if (rgex.IsMatch(name))
            {
                isvalidn = true;
            }
            else
                isvalidn = false;
        }
        public bool VerifyPassword(string newPassword, string hashedPassword)
        {
            Regex saltRegex = new Regex(@"^\$2[aby]\$\d{2}\$[./A-Za-z0-9]{53}$");

            
            return BCrypt.Net.BCrypt.Verify(newPassword, hashedPassword);
        }

        public void validemail(string email, ref bool isvalide)
        {
            try
            {
                MailAddress mail = new MailAddress(email);
                isvalide = true;
            }
            catch
            {
                isvalide = false;
            }
        }
        public void vaildpass(string pass, ref bool isvaildp)
        {
            if (pass.Length > 8)
                isvaildp = true;
            else
                isvaildp = false;

        }
        public void adduser(ref bool isvaildn, ref bool isvailde, ref bool isvaildpass, ref bool isvaid)
        {
            if (isvailde && isvaildn && isvaildpass)
                isvaid = true;
            else
                isvaid = false;
        }
        public userdata searchByEmail(userdata user)
        {
            Data db = new Data();
            var users = db.userdata.Where(u => u.u_email == user.u_email);
            if (users != null && users.Count() > 0)
                return users.First();
            else
                return null;
        }
        public userdata isFoundUser(userdata user)
        {
            //a method to search for a user in the userdata database
            Data db = new Data();

            var Users = db.userdata.Where(a => a.u_email == user.u_email).FirstOrDefault();
            bool foundUserPass= false;
            if (Users != null)
                foundUserPass = VerifyPassword(user.u_password, Users.u_password);

            if (Users != null && Users.u_email == user.u_email && foundUserPass)
            {
                return Users;
            }
            return null;
        }
        public void UpdateUserData(userdata CurrentUser)
        {
            //connection string with your server
 //           string connectionString = @"Data Source=DESKTOP-MN38AK4;Initial Catalog=ctrltask;Integrated Security=True";
            var db = new Data();
            var currentUser = db.userdata.Where(found => found.u_id == CurrentUser.u_id).FirstOrDefault();

            if (CurrentUser.u_id != 0)
            {
                try
                {

                    using (SqlConnection connection = new SqlConnection(db.connectionString))
                    {
                        connection.Open();

                        string updateQuery = "UPDATE userdata SET ";

                        if (!string.IsNullOrEmpty(CurrentUser.u_name))
                        {

                            updateQuery += "u_name = @u_name, ";
                        }
                        if(!string.IsNullOrWhiteSpace(CurrentUser.img)) {
                            updateQuery += "img =@img, ";
                                }
                        if (!string.IsNullOrEmpty(CurrentUser.u_email))

                        {
                            //MessageBox.Show("this in email");
                            List<userdata> user = new List<userdata>();

                            if (CurrentUser.u_email.Contains("@") && CurrentUser.u_email[CurrentUser.u_email.Length - 1] != '@')
                            {


                                updateQuery += "u_email = @u_email, ";
                            }
                            else
                            {
                          //      MessageBox.Show("the email is invalid");
                            }
                        }
                        //userdata uu = new userdata();
                        if (!string.IsNullOrEmpty(CurrentUser.u_password))
                        {

                            if (u_password.Length < 8)
                            {
                                MessageBox.Show("the password is short");
                            }
                            else
                            {
                                if (currentUser.u_password == CurrentUser.u_password)
                                {
                                    MessageBox.Show("The new password is equal the old password,");
                                }
                                else updateQuery += "u_password = @u_password, ";
                            }
                        }


                        updateQuery = updateQuery.TrimEnd(' ', ',');


                        updateQuery += " WHERE u_id = @u_id";
                        //MessageBox.Show(CurrentUser.u_id.ToString());
                        //MessageBox.Show(updateQuery);

                        using (SqlCommand command = new SqlCommand(updateQuery, connection))
                        {

                            if (!string.IsNullOrEmpty(CurrentUser.u_email))
                            {
                                //  MessageBox.Show("in emailf");
                                command.Parameters.AddWithValue("@u_email", CurrentUser.u_email.ToLower());
                            }

                            if (!string.IsNullOrWhiteSpace(CurrentUser.img))
                            {
                                command.Parameters.Add(CurrentUser.img);
                            }
                                if (!string.IsNullOrEmpty(CurrentUser.u_password))
                            {
                                command.Parameters.AddWithValue("@u_password", CurrentUser.u_password);
                                MessageBox.Show(CurrentUser.u_password);
                            }
                            if (!string.IsNullOrEmpty(CurrentUser.u_name))
                            {

                                command.Parameters.AddWithValue("@u_name", CurrentUser.u_name);
                            }

                            command.Parameters.AddWithValue("@u_id", CurrentUser.u_id);
                            //MessageBox.Show(updateQuery);

                            int rowsAffected = command.ExecuteNonQuery();
                            //MessageBox.Show(rowsAffected.ToString());

                            if (rowsAffected > 0)
                            {
                                //MessageBox.Show("done");
                                // MessageBox("done");
                                Console.WriteLine("User data updated successfully.");
                            }
                            else
                            {
                              //  MessageBox.Show("notdone");
                                Console.WriteLine("User not found. No data updated.");
                            }
                        }
                    }
                }

                catch (Exception ex)
                {
                    Console.WriteLine("An error occurred: " + ex.Message);
                }
            }




        }


    }
}
